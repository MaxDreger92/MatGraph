import os
from dotenv import load_dotenv

from graphutils.general import ReportBuilder, TableDataTransformer
from importing.NodeAttributeExtraction.setupMessages import PROPERTY_PARAMETER_MESSAGE
from importing.models import (NodeAttribute, ManufacturingAttribute,
                              MeasurementAttribute, MatterAttribute,
                              MetadataAttribute, PropertyAttribute,
                              ParameterAttribute, ImporterCache, LabelClassificationReport,
                              AttributeClassificationReport)
from importing.utils.openai import chat_with_gpt3, chat_with_gpt4
from mat2devplatform import settings


class AttributeClassifier(TableDataTransformer):
    """
    A classifier for attributing labels and sub-attributes to data headings.

    Attributes:
        data (list): The input data to classify.
        context (str): The context for classification.
        cache (bool): Flag to use caching mechanism.
    """

    def __init__(self, predicted_labels, ReportClass = LabelClassificationReport,  **kwargs):
        kwargs['data'] = predicted_labels
        self.attribute_type = 'column_attribute'
        super().__init__(ReportClass = LabelClassificationReport, **kwargs)

    def set_labels(self, labels):
        print("Setting labels")
        print(labels)

    @property
    def iterable(self):
        """
        Returns the headers for iteration.

        Returns:
            pandas.Series: The headers of the table data.
        """
        return self.data

    def iterate(self):
        """
        Iterates over each header to transform the data.
        """
        for index, element in enumerate(self.iterable):
            self._process(element = element, index = index)
    def _process(self, **kwargs):
        """
        Transform the data.
        """
        if self._pre_check(index = kwargs['index'], element = kwargs['element']):
            return
        elif self._check_cache(index = kwargs['index'], element = kwargs['element']):
            return
        # elif kwargs['element']['1_label'] == 'Property' or kwargs['element']['1_label'] == 'Parameter':
        #     prompt = f"""
        #     Context: {self.context}.
        #     Header: {kwargs['element']['header']}
        #     Column values: {', '.join(kwargs['element']['column_values'][:4])}
        #     """
        #     result = chat_with_gpt4(setup_message= PROPERTY_PARAMETER_MESSAGE, prompt = prompt)
        #     if result == "value" or result == "unit" or result == "error" or result == "standard deviation":
        #         ImporterCache.update(kwargs['element']['header'], column_attribute=result, attribute_type=self.attribute_type)
        #     else:
        #         result = "value"
        #     self._update_with_chat(result = result, input_string = prompt, **kwargs)
        #     return
        else:
            self._transform(index = kwargs['index'], element = kwargs['element'])


    def _pre_check(self, index, element):
        """
        Perform a check before processing the data.
        """

        column = element['column_values']
        if len(column) == 0:
            return True
        return False


    def _update_with_chat(self, result, input_string, **kwargs):
        """
        Update the classification result with a chat result.
        """
        print("Chat result", result)
        self._results.append({
            **kwargs['element'],
            "cached": False,
            "input_string": input_string.replace("\n", "").replace(" ", ""),
            "1_attribute": result,
            **{f"{i}_attribute": None for i in range(2, 5)},
            **{f"{i}_subattributes": None for i in range(1, 5)},
            **{f"{i}_predicted_attribute_similarities": None for i in range(1, 5)}
        })
        ImporterCache.update(kwargs['element']['header'], column_attribute=result, attribute_type=self.attribute_type)


    def build_results(self):
        self._results = sorted(self._results, key=lambda x: x['index'])


    def _update_from_cache(self, element):
        """
        Attempt to update the element from cache.

        Args:
            element (dict): The element to update.

        Returns:
            bool: True if the element was updated from cache, False otherwise.
        """
        if cached := ImporterCache.fetch(element['header'], element['column_values'][0]):
            attribute = cached[3]
            if attribute is not None:
                self._results.append({
                    **element,
                    "cached": True,
                    "input_string": None,
                    **{f"{i+1}_attribute": attribute for i in range(4)},  # Assuming 4 attributes
                    **{f"{i+1}_subattribute": attribute for i in range(4)},  # Assuming 4 subattributes
                    **{f"{i+1}_attribute_similarity": 1 for i in range(4)}  # Assuming similarity is 1 for all
                })
                return True
        return False




    def _update(self, result, input_string, **kwargs):
        """
        Update the element's data based on the query result.

        Args:
            input_string (str): The input string used for the query.
            result (list): The query result to update the element with.
            **kwargs: Additional keyword arguments.
        """
        element = kwargs['element']
        self._results.append({
            **element,
            "cached": False,
            "input_string": input_string.replace("\n", ""),
            **{f"{i+1}_attribute": r[0].name for i, r in enumerate(result)},
            **{f"{i+1}_subattribute": r[2] for i, r in enumerate(result)},
            **{f"{i+1}_attribute_silirity": r[1] for i, r in enumerate(result)}
        })
        ImporterCache.update(element['header'], column_attribute=result[0][0].name, attribute_type= self.attribute_type)

    def _update_with_cache(self, cached, **kwargs):
        """
        Update the element's data based on the query result.

        Args:
            input_string (str): The input string used for the query.
            result (list): The query result to update the element with.
            **kwargs: Additional keyword arguments.
        """
        element = kwargs['element']
        self._results.append({
            **element,
            "cached": True,
            "input_string": None,
            "1_attribute": cached[3],
            **{f"{i}_attribute": None for i in range(2, 5)},
            **{f"{i}_subattribute": None for i in range(1, 5)},
            **{f"{i}_attribute_similarity": None for i in range(1, 5)}
        })

    def _llm_request(self, input_string, **kwargs):
        """
        Send a request to the node label model.
        """
        return self._get_node_class(kwargs['element']['1_label']).nodes.get_by_string(string=input_string, limit=5,
                                             include_similarity=True, include_input_string=True)

    def _create_input_string(self, index, element):
        """
        Create an input string for classification based on the element.

        Args:
            element (dict): The element to create an input string for.

        Returns:
            str: The created input string.
        """
        return f"""
        context: Solar cell fabrication 
        table heading: "{element['header']}"
        Table Rows: {", ".join(element['column_values'][1:min([3, len(element['column_values'])])])}
        Describe the attribute presented here!
        """.lower().replace("\t", "")

    @staticmethod
    def _get_node_class(label):
        """
        Get the node class corresponding to a label.

        Args:
            label (str): The label to get the node class for.

        Returns:
            Class: The corresponding node class.
        """
        node_classes = {
            "Manufacturing": ManufacturingAttribute,
            "Measurement": MeasurementAttribute,
            "Matter": MatterAttribute,
            "Metadata": MetadataAttribute,
            "Property": PropertyAttribute,
            "Parameter": ParameterAttribute  # Default case
        }
        return node_classes.get(label, ParameterAttribute)


    @property
    def results(self):
        """
        Get the predicted attributes.

        Returns:
            list: The predicted attributes.
        """

        return self._results






if __name__ == "__main__":
    # Get the project root directory
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    # Change the current working directory to the project root directory
    os.chdir(project_root)

    load_dotenv()
    from neomodel import config

    config.DATABASE_URL = os.getenv('NEOMODEL_NEO4J_BOLT_URL')
    print(config.DATABASE_URL)

    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mat2devplatform.settings")
    api_key = settings.OPENAI_API_KEY
    print(os.getcwd())
    ontology_folder = "/home/mdreger/Documents/MatGraphAI/Ontology/"
    file_name = "../../../data/materials.csv"
    # Instantiate the EmbeddingSearch class

    input = [{'header': 'product_id', 'column_index': 0, 'pd_header': 'product_id', 'input_string': 'Define the term "product_id" (example: "13842" is a "product_id") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'device id', 'full_result': ('device id', [('device id', 0.8050242), ('measurement quantity', 0.80323327), ('process quantity', 0.7899914), ('material name abbreviation', 0.78825533), ('manufacturing quanity', 0.7824373)])}, {'header': 'layer_function', 'column_index': 1, 'pd_header': 'layer_function', 'input_string': 'Define the term "layer_function" (example: "ETL" is a "layer_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.807333), ('component composition', 0.7993455), ('device composition', 0.7644649), ('laboratory_equipment', 0.75649285), ('material name', 0.75232214)])}, {'header': 'layer_process', 'column_index': 2, 'pd_header': 'layer_process', 'input_string': 'Define the term "layer_process" (example: "Spincoating" is a "layer_process") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'manufacturing', 'predicted_sublabel': 'manufacturing process', 'full_result': ('manufacturing process', [('manufacturing process', 0.8105667), ('component manufacturing', 0.8063516), ('material process', 0.7989018), ('measurement process', 0.7967433), ('material process parameter', 0.7961138)])}, {'header': 'layer_process_location', 'column_index': 3, 'pd_header': 'layer_process_location', 'input_string': 'Define the term "layer_process_location" (example: "OPVSpinbot" is a "layer_process_location") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'metadata', 'predicted_sublabel': 'location', 'full_result': ('location', [('location', 0.8136105), ('fabrication condition', 0.79995114), ('component manufacturing', 0.79401314), ('condition parameter', 0.7940102), ('material process parameter', 0.79360497)])}, {'header': 'layer_material_content_ratio', 'column_index': 8, 'pd_header': 'layer_material_content_ratio', 'input_string': 'Define the term "layer_material_content_ratio" (example: "1" is a "layer_material_content_ratio") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material ratio', 'full_result': ('material ratio', [('material ratio', 0.8376813), ('material concentration', 0.82154495), ('material measurement parameter', 0.8035124), ('material manufacturing parameter', 0.79015326), ('material_property', 0.7827193)])}, {'header': 'content_function', 'column_index': 9, 'pd_header': 'content_function', 'input_string': 'Define the term "content_function" (example: "ETL" is a "content_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.8287323), ('component composition', 0.82162404), ('material process', 0.7752255), ('manufacturing process', 0.77247006), ('measurement quantity', 0.7720865)])}, {'header': 'material_batch_barcode', 'column_index': 10, 'pd_header': 'material_batch_barcode', 'input_string': 'Define the term "material_batch_barcode" (example: "121800" is a "material_batch_barcode") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.8079634), ('measurement quantity', 0.8008651), ('material measurement parameter', 0.79750264), ('material manufacturing condition', 0.79358876), ('material manufacturing parameter', 0.7934578)])}, {'header': 'material_name_short', 'column_index': 11, 'pd_header': 'material_name_short', 'input_string': 'Define the term "material_name_short" (example: "ZnO" is a "material_name_short") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.8208808), ('material manufacturing parameter', 0.79472184), ('material', 0.7938446), ('material manufacturing', 0.7910551), ('material measurement parameter', 0.78873384)])}, {'header': 'annealing_time', 'column_index': 12, 'pd_header': 'annealing_time', 'input_string': 'Define the term "annealing_time" (example: "00:46:01" is a "annealing_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.7893798), ('measurement parameter', 0.7869426), ('measurement process', 0.78354657), ('manufacturing process', 0.77796984), ('manufacturing parameter', 0.77770334)])}, {'header': 'annealing_temperature', 'column_index': 13, 'pd_header': 'annealing_temperature', 'input_string': 'Define the term "annealing_temperature" (example: "180" is a "annealing_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'measurement parameter', 'full_result': ('measurement parameter', [('measurement parameter', 0.7900634), ('material manufacturing parameter', 0.7861595), ('measurement quantity', 0.7806648), ('measurement process', 0.77560616), ('laboratory_equipment', 0.77412575)])}, {'header': 'product_id', 'column_index': 14, 'pd_header': 'product_id.1', 'input_string': 'Define the term "product_id" (example: "13842" is a "product_id") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'device id', 'full_result': ('device id', [('device id', 0.805007), ('measurement quantity', 0.8033262), ('process quantity', 0.79016626), ('material name abbreviation', 0.78831017), ('manufacturing quanity', 0.7826103)])}, {'header': 'layer_function', 'column_index': 15, 'pd_header': 'layer_function.1', 'input_string': 'Define the term "layer_function" (example: "ActiveLayer" is a "layer_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.80911094), ('component composition', 0.80028653), ('device composition', 0.76778084), ('laboratory_equipment', 0.7558981), ('measurement quantity', 0.7477142)])}, {'header': 'layer_process', 'column_index': 16, 'pd_header': 'layer_process.1', 'input_string': 'Define the term "layer_process" (example: "Spincoating" is a "layer_process") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'manufacturing', 'predicted_sublabel': 'manufacturing process', 'full_result': ('manufacturing process', [('manufacturing process', 0.8105667), ('component manufacturing', 0.8063516), ('material process', 0.7989018), ('measurement process', 0.7967433), ('material process parameter', 0.7961138)])}, {'header': 'layer_process_location', 'column_index': 17, 'pd_header': 'layer_process_location.1', 'input_string': 'Define the term "layer_process_location" (example: "LineOne" is a "layer_process_location") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'metadata', 'predicted_sublabel': 'location', 'full_result': ('location', [('location', 0.8084896), ('material process parameter', 0.7900727), ('measurement process', 0.7884288), ('manufacturing process', 0.78693557), ('material process', 0.78683543)])}, {'header': 'layer_material_solid_concentration', 'column_index': 18, 'pd_header': 'layer_material_solid_concentration.1', 'input_string': 'Define the term "layer_material_solid_concentration" (example: "19.5094339622642" is a "layer_material_solid_concentration") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material concentration', 'full_result': ('material concentration', [('material concentration', 0.8063435), ('material manufacturing parameter', 0.79400086), ('material measurement parameter', 0.79341924), ('material ratio', 0.78841156), ('material', 0.78637815)])}, {'header': 'layer_material_temperature', 'column_index': 19, 'pd_header': 'layer_material_temperature.1', 'input_string': 'Define the term "layer_material_temperature" (example: "25" is a "layer_material_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.7943653), ('material measurement parameter', 0.7933712), ('material condition', 0.78770673), ('material manufacturing condition', 0.7840174), ('measurement parameter', 0.78116494)])}, {'header': 'layer_material_stirring_time', 'column_index': 20, 'pd_header': 'layer_material_stirring_time.1', 'input_string': 'Define the term "layer_material_stirring_time" (example: "100" is a "layer_material_stirring_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.81066644), ('material measurement parameter', 0.79720986), ('manufacturing process', 0.79573274), ('material manufacturing condition', 0.79380023), ('material', 0.7895777)])}, {'header': 'layer_material_stirring_speed', 'column_index': 21, 'pd_header': 'layer_material_stirring_speed.1', 'input_string': 'Define the term "layer_material_stirring_speed" (example: "600" is a "layer_material_stirring_speed") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.8067237), ('material measurement parameter', 0.79411876), ('material', 0.7895351), ('material manufacturing condition', 0.7884364), ('manufacturing process', 0.78811204)])}, {'header': 'layer_material_content_ratio', 'column_index': 22, 'pd_header': 'layer_material_content_ratio.1', 'input_string': 'Define the term "layer_material_content_ratio" (example: "0.9152" is a "layer_material_content_ratio") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material ratio', 'full_result': ('material ratio', [('material ratio', 0.8410291), ('material concentration', 0.8254976), ('material measurement parameter', 0.8087851), ('material manufacturing parameter', 0.79379827), ('measurement parameter', 0.78525144)])}, {'header': 'content_function', 'column_index': 23, 'pd_header': 'content_function.1', 'input_string': 'Define the term "content_function" (example: "Donor" is a "content_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.8326376), ('component composition', 0.82614774), ('material manufacturing parameter', 0.7791979), ('device composition', 0.77609146), ('manufacturing process', 0.7722949)])}, {'header': 'material_batch_barcode', 'column_index': 24, 'pd_header': 'material_batch_barcode.1', 'input_string': 'Define the term "material_batch_barcode" (example: "321100" is a "material_batch_barcode") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.8068934), ('measurement quantity', 0.80064666), ('material measurement parameter', 0.795711), ('material manufacturing condition', 0.7936195), ('material manufacturing parameter', 0.79340184)])}, {'header': 'material_name_short', 'column_index': 25, 'pd_header': 'material_name_short.1', 'input_string': 'Define the term "material_name_short" (example: "PM6" is a "material_name_short") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.82654536), ('material manufacturing parameter', 0.8030553), ('material measurement parameter', 0.80195755), ('material manufacturing condition', 0.7952944), ('material manufacturing', 0.794135)])}, {'header': 'annealing_time', 'column_index': 26, 'pd_header': 'annealing_time.1', 'input_string': 'Define the term "annealing_time" (example: "00:10:15" is a "annealing_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.7891817), ('measurement parameter', 0.78714126), ('measurement process', 0.78166616), ('measurement quantity', 0.7787665), ('manufacturing process', 0.7779352)])}, {'header': 'annealing_temperature', 'column_index': 27, 'pd_header': 'annealing_temperature.1', 'input_string': 'Define the term "annealing_temperature" (example: "160" is a "annealing_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'measurement parameter', 'full_result': ('measurement parameter', [('measurement parameter', 0.7882849), ('material manufacturing parameter', 0.78553635), ('measurement quantity', 0.77942175), ('measurement process', 0.7755939), ('manufacturing process', 0.77403647)])}, {'header': 'product_id', 'column_index': 28, 'pd_header': 'product_id.2', 'input_string': 'Define the term "product_id" (example: "13842" is a "product_id") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'device id', 'full_result': ('device id', [('device id', 0.8069749), ('measurement quantity', 0.8038935), ('process quantity', 0.78965294), ('material name abbreviation', 0.7888665), ('measurement parameter', 0.78211164)])}, {'header': 'layer_function', 'column_index': 29, 'pd_header': 'layer_function.2', 'input_string': 'Define the term "layer_function" (example: "ActiveLayer" is a "layer_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.80911094), ('component composition', 0.80028653), ('device composition', 0.76778084), ('laboratory_equipment', 0.7558981), ('measurement quantity', 0.7477142)])}, {'header': 'layer_process', 'column_index': 30, 'pd_header': 'layer_process.2', 'input_string': 'Define the term "layer_process" (example: "Spincoating" is a "layer_process") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'manufacturing', 'predicted_sublabel': 'manufacturing process', 'full_result': ('manufacturing process', [('manufacturing process', 0.8105667), ('component manufacturing', 0.8063516), ('material process', 0.7989018), ('measurement process', 0.7967433), ('material process parameter', 0.7961138)])}, {'header': 'layer_process_location', 'column_index': 31, 'pd_header': 'layer_process_location.2', 'input_string': 'Define the term "layer_process_location" (example: "LineOne" is a "layer_process_location") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'metadata', 'predicted_sublabel': 'location', 'full_result': ('location', [('location', 0.8084896), ('material process parameter', 0.7900727), ('measurement process', 0.7884288), ('manufacturing process', 0.78693557), ('material process', 0.78683543)])}, {'header': 'layer_material_solid_concentration', 'column_index': 32, 'pd_header': 'layer_material_solid_concentration.2', 'input_string': 'Define the term "layer_material_solid_concentration" (example: "19.0943396226415" is a "layer_material_solid_concentration") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material concentration', 'full_result': ('material concentration', [('material concentration', 0.808671), ('material manufacturing parameter', 0.79466504), ('material measurement parameter', 0.79443353), ('material ratio', 0.79052895), ('material', 0.7874625)])}, {'header': 'layer_material_temperature', 'column_index': 33, 'pd_header': 'layer_material_temperature.2', 'input_string': 'Define the term "layer_material_temperature" (example: "24" is a "layer_material_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material measurement parameter', 'full_result': ('material measurement parameter', [('material measurement parameter', 0.7949331), ('material manufacturing parameter', 0.79290414), ('material condition', 0.7891275), ('material manufacturing condition', 0.78356963), ('measurement parameter', 0.7832215)])}, {'header': 'layer_material_stirring_time', 'column_index': 34, 'pd_header': 'layer_material_stirring_time.2', 'input_string': 'Define the term "layer_material_stirring_time" (example: "240" is a "layer_material_stirring_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.8085756), ('material measurement parameter', 0.7950959), ('manufacturing process', 0.79373), ('material manufacturing condition', 0.79136276), ('material', 0.79115075)])}, {'header': 'layer_material_stirring_speed', 'column_index': 35, 'pd_header': 'layer_material_stirring_speed.2', 'input_string': 'Define the term "layer_material_stirring_speed" (example: "500" is a "layer_material_stirring_speed") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.8046191), ('material measurement parameter', 0.79278266), ('material', 0.78619206), ('manufacturing process', 0.78604305), ('material manufacturing condition', 0.7857982)])}, {'header': 'layer_material_content_ratio', 'column_index': 36, 'pd_header': 'layer_material_content_ratio.2', 'input_string': 'Define the term "layer_material_content_ratio" (example: "0.0336" is a "layer_material_content_ratio") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material ratio', 'full_result': ('material ratio', [('material ratio', 0.8437711), ('material concentration', 0.8297944), ('material measurement parameter', 0.80851436), ('material manufacturing parameter', 0.795094), ('material_property', 0.78433573)])}, {'header': 'content_function', 'column_index': 37, 'pd_header': 'content_function.2', 'input_string': 'Define the term "content_function" (example: "Acceptor" is a "content_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.8293694), ('component composition', 0.82662535), ('device composition', 0.77871716), ('material manufacturing parameter', 0.7771559), ('manufacturing process', 0.7749184)])}, {'header': 'material_batch_barcode', 'column_index': 38, 'pd_header': 'material_batch_barcode.2', 'input_string': 'Define the term "material_batch_barcode" (example: "321116" is a "material_batch_barcode") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.8080652), ('measurement quantity', 0.7997916), ('material measurement parameter', 0.7947128), ('material manufacturing condition', 0.79412735), ('material manufacturing parameter', 0.7924951)])}, {'header': 'material_name_short', 'column_index': 39, 'pd_header': 'material_name_short.2', 'input_string': 'Define the term "material_name_short" (example: "Y12" is a "material_name_short") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.8314772), ('material manufacturing parameter', 0.7976016), ('material measurement parameter', 0.7969346), ('material manufacturing', 0.7904576), ('material manufacturing condition', 0.79044795)])}, {'header': 'annealing_time', 'column_index': 40, 'pd_header': 'annealing_time.2', 'input_string': 'Define the term "annealing_time" (example: "00:10:15" is a "annealing_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.7891817), ('measurement parameter', 0.78714126), ('measurement process', 0.78166616), ('measurement quantity', 0.7787665), ('manufacturing process', 0.7779352)])}, {'header': 'annealing_temperature', 'column_index': 41, 'pd_header': 'annealing_temperature.2', 'input_string': 'Define the term "annealing_temperature" (example: "250" is a "annealing_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'measurement parameter', 'full_result': ('measurement parameter', [('measurement parameter', 0.78792125), ('material manufacturing parameter', 0.7873832), ('measurement quantity', 0.7828821), ('manufacturing parameter', 0.7756772), ('laboratory_equipment', 0.7749691)])}, {'header': 'product_id', 'column_index': 42, 'pd_header': 'product_id.3', 'input_string': 'Define the term "product_id" (example: "13842" is a "product_id") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'device id', 'full_result': ('device id', [('device id', 0.8050406), ('measurement quantity', 0.8033489), ('process quantity', 0.79017633), ('material name abbreviation', 0.7883596), ('manufacturing quanity', 0.7826474)])}, {'header': 'layer_function', 'column_index': 43, 'pd_header': 'layer_function.3', 'input_string': 'Define the term "layer_function" (example: "ActiveLayer" is a "layer_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.80911094), ('component composition', 0.80028653), ('device composition', 0.76778084), ('laboratory_equipment', 0.7558981), ('measurement quantity', 0.7477142)])}, {'header': 'layer_process', 'column_index': 44, 'pd_header': 'layer_process.3', 'input_string': 'Define the term "layer_process" (example: "Spincoating" is a "layer_process") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'manufacturing', 'predicted_sublabel': 'manufacturing process', 'full_result': ('manufacturing process', [('manufacturing process', 0.8106213), ('component manufacturing', 0.806377), ('material process', 0.7989678), ('measurement process', 0.796767), ('material process parameter', 0.7961018)])}, {'header': 'layer_process_location', 'column_index': 45, 'pd_header': 'layer_process_location.3', 'input_string': 'Define the term "layer_process_location" (example: "LineOne" is a "layer_process_location") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'metadata', 'predicted_sublabel': 'location', 'full_result': ('location', [('location', 0.8084896), ('material process parameter', 0.7900727), ('measurement process', 0.7884288), ('manufacturing process', 0.78693557), ('material process', 0.78683543)])}, {'header': 'layer_material_solid_concentration', 'column_index': 46, 'pd_header': 'layer_material_solid_concentration.3', 'input_string': 'Define the term "layer_material_solid_concentration" (example: "26.9811320754717" is a "layer_material_solid_concentration") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material concentration', 'full_result': ('material concentration', [('material concentration', 0.80888224), ('material manufacturing parameter', 0.7942631), ('material measurement parameter', 0.7933662), ('material ratio', 0.78904337), ('material', 0.7866099)])}, {'header': 'layer_material_temperature', 'column_index': 47, 'pd_header': 'layer_material_temperature.3', 'input_string': 'Define the term "layer_material_temperature" (example: "20" is a "layer_material_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material measurement parameter', 'full_result': ('material measurement parameter', [('material measurement parameter', 0.7963378), ('material manufacturing parameter', 0.79623514), ('material condition', 0.7907053), ('material manufacturing condition', 0.7863002), ('measurement parameter', 0.78439033)])}, {'header': 'layer_material_stirring_time', 'column_index': 48, 'pd_header': 'layer_material_stirring_time.3', 'input_string': 'Define the term "layer_material_stirring_time" (example: "160" is a "layer_material_stirring_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.80767965), ('material measurement parameter', 0.79545146), ('manufacturing process', 0.7931495), ('material', 0.7911956), ('material manufacturing condition', 0.79076874)])}, {'header': 'layer_material_stirring_speed', 'column_index': 49, 'pd_header': 'layer_material_stirring_speed.3', 'input_string': 'Define the term "layer_material_stirring_speed" (example: "500" is a "layer_material_stirring_speed") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.80458903), ('material measurement parameter', 0.7928338), ('manufacturing process', 0.7859926), ('material', 0.78579706), ('material manufacturing condition', 0.7855929)])}, {'header': 'layer_material_content_ratio', 'column_index': 50, 'pd_header': 'layer_material_content_ratio.3', 'input_string': 'Define the term "layer_material_content_ratio" (example: "0.0702" is a "layer_material_content_ratio") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material ratio', 'full_result': ('material ratio', [('material ratio', 0.8434017), ('material concentration', 0.8288556), ('material measurement parameter', 0.8119303), ('material manufacturing parameter', 0.79858375), ('material_property', 0.7877091)])}, {'header': 'content_function', 'column_index': 51, 'pd_header': 'content_function.3', 'input_string': 'Define the term "content_function" (example: "Acceptor" is a "content_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.8293221), ('component composition', 0.8265944), ('device composition', 0.7786692), ('material manufacturing parameter', 0.77717316), ('manufacturing process', 0.7749375)])}, {'header': 'material_batch_barcode', 'column_index': 52, 'pd_header': 'material_batch_barcode.3', 'input_string': 'Define the term "material_batch_barcode" (example: "321046" is a "material_batch_barcode") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.80735767), ('measurement quantity', 0.80016047), ('material measurement parameter', 0.79521775), ('material manufacturing condition', 0.79331106), ('material manufacturing parameter', 0.79328275)])}, {'header': 'material_name_short', 'column_index': 53, 'pd_header': 'material_name_short.3', 'input_string': 'Define the term "material_name_short" (example: "PCBM70" is a "material_name_short") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.83690846), ('material measurement parameter', 0.80581033), ('material manufacturing parameter', 0.8044385), ('material manufacturing condition', 0.798471), ('material manufacturing', 0.79700464)])}, {'header': 'annealing_time', 'column_index': 54, 'pd_header': 'annealing_time.3', 'input_string': 'Define the term "annealing_time" (example: "00:10:15" is a "annealing_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.78912646), ('measurement parameter', 0.7870238), ('measurement process', 0.78164834), ('measurement quantity', 0.7787401), ('manufacturing process', 0.7779044)])}, {'header': 'annealing_temperature', 'column_index': 55, 'pd_header': 'annealing_temperature.3', 'input_string': 'Define the term "annealing_temperature" (example: "288" is a "annealing_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'measurement parameter', 'full_result': ('measurement parameter', [('measurement parameter', 0.79002756), ('material manufacturing parameter', 0.7842994), ('measurement quantity', 0.7808505), ('measurement process', 0.7744865), ('manufacturing parameter', 0.77417594)])}, {'header': 'product_id', 'column_index': 56, 'pd_header': 'product_id.4', 'input_string': 'Define the term "product_id" (example: "13842" is a "product_id") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'device id', 'full_result': ('device id', [('device id', 0.80505085), ('measurement quantity', 0.8032693), ('process quantity', 0.79002106), ('material name abbreviation', 0.7882999), ('manufacturing quanity', 0.78251326)])}, {'header': 'layer_function', 'column_index': 57, 'pd_header': 'layer_function.4', 'input_string': 'Define the term "layer_function" (example: "ActiveLayer" is a "layer_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.80911094), ('component composition', 0.80028653), ('device composition', 0.76778084), ('laboratory_equipment', 0.7558981), ('measurement quantity', 0.7477142)])}, {'header': 'layer_process', 'column_index': 58, 'pd_header': 'layer_process.4', 'input_string': 'Define the term "layer_process" (example: "Spincoating" is a "layer_process") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'manufacturing', 'predicted_sublabel': 'manufacturing process', 'full_result': ('manufacturing process', [('manufacturing process', 0.8105667), ('component manufacturing', 0.8063516), ('material process', 0.7989018), ('measurement process', 0.7967433), ('material process parameter', 0.7961138)])}, {'header': 'layer_process_location', 'column_index': 59, 'pd_header': 'layer_process_location.4', 'input_string': 'Define the term "layer_process_location" (example: "LineOne" is a "layer_process_location") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'metadata', 'predicted_sublabel': 'location', 'full_result': ('location', [('location', 0.8084896), ('material process parameter', 0.7900727), ('measurement process', 0.7884288), ('manufacturing process', 0.78693557), ('material process', 0.78683543)])}, {'header': 'layer_material_solid_concentration', 'column_index': 60, 'pd_header': 'layer_material_solid_concentration.4', 'input_string': 'Define the term "layer_material_solid_concentration" (example: "26.9811320754717" is a "layer_material_solid_concentration") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material concentration', 'full_result': ('material concentration', [('material concentration', 0.80888224), ('material manufacturing parameter', 0.7942631), ('material measurement parameter', 0.7933662), ('material ratio', 0.78904337), ('material', 0.7866099)])}, {'header': 'layer_material_temperature', 'column_index': 61, 'pd_header': 'layer_material_temperature.4', 'input_string': 'Define the term "layer_material_temperature" (example: "22" is a "layer_material_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.79479337), ('material measurement parameter', 0.7945776), ('material condition', 0.78930515), ('material manufacturing condition', 0.7854298), ('measurement parameter', 0.7847539)])}, {'header': 'layer_material_stirring_time', 'column_index': 62, 'pd_header': 'layer_material_stirring_time.4', 'input_string': 'Define the term "layer_material_stirring_time" (example: "240" is a "layer_material_stirring_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.8085756), ('material measurement parameter', 0.7950959), ('manufacturing process', 0.79373), ('material manufacturing condition', 0.79136276), ('material', 0.79115075)])}, {'header': 'layer_material_stirring_speed', 'column_index': 63, 'pd_header': 'layer_material_stirring_speed.4', 'input_string': 'Define the term "layer_material_stirring_speed" (example: "1600" is a "layer_material_stirring_speed") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.8036151), ('material measurement parameter', 0.79582053), ('material', 0.79048204), ('material manufacturing condition', 0.7864492), ('material ratio', 0.78591794)])}, {'header': 'layer_material_content_ratio', 'column_index': 64, 'pd_header': 'layer_material_content_ratio.4', 'input_string': 'Define the term "layer_material_content_ratio" (example: "1" is a "layer_material_content_ratio") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material ratio', 'full_result': ('material ratio', [('material ratio', 0.8376813), ('material concentration', 0.82154495), ('material measurement parameter', 0.8035124), ('material manufacturing parameter', 0.79015326), ('material_property', 0.7827193)])}, {'header': 'content_function', 'column_index': 65, 'pd_header': 'content_function.4', 'input_string': 'Define the term "content_function" (example: "Solvent" is a "content_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.83815926), ('component composition', 0.82476807), ('manufacturing process', 0.7802625), ('material', 0.78006506), ('material manufacturing parameter', 0.779724)])}, {'header': 'material_batch_barcode', 'column_index': 66, 'pd_header': 'material_batch_barcode.4', 'input_string': 'Define the term "material_batch_barcode" (example: "5" is a "material_batch_barcode") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.8052452), ('measurement quantity', 0.7990859), ('material measurement parameter', 0.7933748), ('material manufacturing parameter', 0.79109114), ('material manufacturing condition', 0.79003847)])}, {'header': 'material_name_short', 'column_index': 67, 'pd_header': 'material_name_short.4', 'input_string': 'Define the term "material_name_short" (example: "o-Xylene" is a "material_name_short") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.82925874), ('material', 0.80158925), ('material manufacturing parameter', 0.79302007), ('material manufacturing', 0.79185045), ('material measurement parameter', 0.7911912)])}, {'header': 'annealing_time', 'column_index': 68, 'pd_header': 'annealing_time.4', 'input_string': 'Define the term "annealing_time" (example: "00:10:15" is a "annealing_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.7891817), ('measurement parameter', 0.78714126), ('measurement process', 0.78166616), ('measurement quantity', 0.7787665), ('manufacturing process', 0.7779352)])}, {'header': 'annealing_temperature', 'column_index': 69, 'pd_header': 'annealing_temperature.4', 'input_string': 'Define the term "annealing_temperature" (example: "120" is a "annealing_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'measurement parameter', 'full_result': ('measurement parameter', [('measurement parameter', 0.7928962), ('material manufacturing parameter', 0.78602314), ('measurement quantity', 0.7815368), ('measurement process', 0.7778499), ('manufacturing parameter', 0.7755427)])}, {'header': 'product_id', 'column_index': 70, 'pd_header': 'product_id.5', 'input_string': 'Define the term "product_id" (example: "13842" is a "product_id") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'device id', 'full_result': ('device id', [('device id', 0.8069749), ('measurement quantity', 0.8038935), ('process quantity', 0.78965294), ('material name abbreviation', 0.7888665), ('measurement parameter', 0.78211164)])}, {'header': 'layer_function', 'column_index': 71, 'pd_header': 'layer_function.5', 'input_string': 'Define the term "layer_function" (example: "HTL" is a "layer_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.80928665), ('component composition', 0.7939543), ('device composition', 0.7628126), ('laboratory_equipment', 0.7544035), ('material process', 0.7521732)])}, {'header': 'layer_process', 'column_index': 72, 'pd_header': 'layer_process.5', 'input_string': 'Define the term "layer_process" (example: "Evaporation" is a "layer_process") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'manufacturing', 'predicted_sublabel': 'manufacturing process', 'full_result': ('manufacturing process', [('manufacturing process', 0.8051162), ('measurement process', 0.8021325), ('material process parameter', 0.79720336), ('component manufacturing', 0.7935786), ('material process', 0.79298174)])}, {'header': 'layer_process_location', 'column_index': 73, 'pd_header': 'layer_process_location.5', 'input_string': 'Define the term "layer_process_location" (example: "LineOne" is a "layer_process_location") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'metadata', 'predicted_sublabel': 'location', 'full_result': ('location', [('location', 0.80882955), ('material process parameter', 0.7902251), ('measurement process', 0.7886699), ('manufacturing process', 0.7872158), ('material process', 0.7869706)])}, {'header': 'content_function', 'column_index': 79, 'pd_header': 'content_function.5', 'input_string': 'Define the term "content_function" (example: "HTL" is a "content_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.83070385), ('component composition', 0.81936204), ('manufacturing process', 0.77371454), ('material process', 0.7731888), ('material manufacturing parameter', 0.7709149)])}, {'header': 'material_batch_barcode', 'column_index': 80, 'pd_header': 'material_batch_barcode.5', 'input_string': 'Define the term "material_batch_barcode" (example: "7" is a "material_batch_barcode") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.80558556), ('measurement quantity', 0.79750705), ('material measurement parameter', 0.79368633), ('material manufacturing parameter', 0.7903699), ('material manufacturing condition', 0.7890837)])}, {'header': 'material_name_short', 'column_index': 81, 'pd_header': 'material_name_short.5', 'input_string': 'Define the term "material_name_short" (example: "MoOx" is a "material_name_short") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.82956475), ('material manufacturing parameter', 0.7975284), ('material measurement parameter', 0.7971866), ('material manufacturing condition', 0.795032), ('material', 0.79448533)])}, {'header': 'annealing_time', 'column_index': 82, 'pd_header': 'annealing_time.5', 'input_string': 'Define the term "annealing_time" (example: "00:20:22" is a "annealing_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.79006714), ('measurement parameter', 0.78804976), ('measurement process', 0.7826783), ('measurement quantity', 0.7786742), ('manufacturing process', 0.7785374)])}, {'header': 'annealing_temperature', 'column_index': 83, 'pd_header': 'annealing_temperature.5', 'input_string': 'Define the term "annealing_temperature" (example: "100" is a "annealing_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'measurement parameter', 'full_result': ('measurement parameter', [('measurement parameter', 0.7927338), ('material manufacturing parameter', 0.7894156), ('measurement quantity', 0.783019), ('measurement process', 0.7775507), ('manufacturing parameter', 0.77718043)])}, {'header': 'product_id', 'column_index': 84, 'pd_header': 'product_id.6', 'input_string': 'Define the term "product_id" (example: "13842" is a "product_id") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'device id', 'full_result': ('device id', [('device id', 0.805007), ('measurement quantity', 0.8033262), ('process quantity', 0.79016626), ('material name abbreviation', 0.78831017), ('manufacturing quanity', 0.7826103)])}, {'header': 'layer_function', 'column_index': 85, 'pd_header': 'layer_function.6', 'input_string': 'Define the term "layer_function" (example: "Electrode" is a "layer_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.80794406), ('component composition', 0.79461026), ('device composition', 0.7771257), ('laboratory_equipment', 0.76518536), ('device', 0.7518749)])}, {'header': 'layer_process', 'column_index': 86, 'pd_header': 'layer_process.6', 'input_string': 'Define the term "layer_process" (example: "Evaporation" is a "layer_process") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'manufacturing', 'predicted_sublabel': 'manufacturing process', 'full_result': ('manufacturing process', [('manufacturing process', 0.8051162), ('measurement process', 0.8021325), ('material process parameter', 0.79720336), ('component manufacturing', 0.7935786), ('material process', 0.79298174)])}, {'header': 'layer_process_location', 'column_index': 87, 'pd_header': 'layer_process_location.6', 'input_string': 'Define the term "layer_process_location" (example: "LineOne" is a "layer_process_location") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'metadata', 'predicted_sublabel': 'location', 'full_result': ('location', [('location', 0.8084896), ('material process parameter', 0.7900727), ('measurement process', 0.7884288), ('manufacturing process', 0.78693557), ('material process', 0.78683543)])}, {'header': 'content_function', 'column_index': 93, 'pd_header': 'content_function.6', 'input_string': 'Define the term "content_function" (example: "Electrode" is a "content_function") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material composition', 'full_result': ('material composition', [('material composition', 0.8291333), ('component composition', 0.8193418), ('device composition', 0.7837393), ('manufacturing process', 0.77204275), ('material manufacturing parameter', 0.7711451)])}, {'header': 'material_batch_barcode', 'column_index': 94, 'pd_header': 'material_batch_barcode.6', 'input_string': 'Define the term "material_batch_barcode" (example: "6" is a "material_batch_barcode") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.80468076), ('measurement quantity', 0.7987846), ('material measurement parameter', 0.79409313), ('material manufacturing parameter', 0.7925348), ('material manufacturing condition', 0.7905643)])}, {'header': 'material_name_short', 'column_index': 95, 'pd_header': 'material_name_short.6', 'input_string': 'Define the term "material_name_short" (example: "Ag" is a "material_name_short") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'matter', 'predicted_sublabel': 'material name abbreviation', 'full_result': ('material name abbreviation', [('material name abbreviation', 0.83219373), ('material measurement parameter', 0.79585314), ('material manufacturing parameter', 0.7937627), ('material', 0.79039526), ('material manufacturing', 0.78960717)])}, {'header': 'annealing_time', 'column_index': 96, 'pd_header': 'annealing_time.6', 'input_string': 'Define the term "annealing_time" (example: "00:20:22" is a "annealing_time") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'material manufacturing parameter', 'full_result': ('material manufacturing parameter', [('material manufacturing parameter', 0.79006714), ('measurement parameter', 0.78804976), ('measurement process', 0.7826783), ('measurement quantity', 0.7786742), ('manufacturing process', 0.7785374)])}, {'header': 'annealing_temperature', 'column_index': 97, 'pd_header': 'annealing_temperature.6', 'input_string': 'Define the term "annealing_temperature" (example: "100" is a "annealing_temperature") in a three word sentence,            on a very high abstraction-level(matter, manufacturing, measurement, property, parameter, equipment, laboratory)!                             ', 'predicted_label': 'parameter', 'predicted_sublabel': 'measurement parameter', 'full_result': ('measurement parameter', [('measurement parameter', 0.79249847), ('material manufacturing parameter', 0.7891412), ('measurement quantity', 0.78288317), ('measurement process', 0.7773471), ('manufacturing parameter', 0.7767925)])}]

