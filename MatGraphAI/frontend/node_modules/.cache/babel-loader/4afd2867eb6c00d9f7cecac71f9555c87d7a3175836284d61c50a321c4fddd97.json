{"ast":null,"code":"var _jsxFileName = \"/home/mdreger/Documents/MatGraphAI/MatGraphAI/frontend/src/components/canvas/canvas.component.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport cytoscape from \"cytoscape\";\nimport fcose from \"cytoscape-fcose\";\nimport _ from \"lodash\";\nimport { TbBinaryTree } from \"react-icons/tb\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport UndoIcon from \"@mui/icons-material/Undo\";\nimport RedoIcon from \"@mui/icons-material/Redo\";\nimport { LuFileJson } from \"react-icons/lu\";\nimport ContextCanvas from \"./ctxt/canvas-ctxt.component\";\nimport Node from \"./node.component\";\nimport Connection, { TempConnection } from \"./connection.component\";\nimport { graphLayouts } from \"./types/graphLayouts\";\nimport { isConnectionLegitimate, convertToJSONFormat, saveToFile } from \"./helper/canvas.helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Canvas(props) {\n  _s();\n  const {\n    colorIndex,\n    setWorkflow,\n    style\n  } = props;\n  const [nodes, setNodes] = useState([]);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n  const [selectedNodeIDs, setSelectedNodeIDs] = useState(null);\n  const [connectingNode, setConnectingNode] = useState(null);\n  const [connections, setConnections] = useState([]);\n  const [selectedConnectionID, setSelectedConnectionID] = useState(null);\n  const [history, setHistory] = useState({\n    nodes: [],\n    connections: []\n  });\n  const [future, setFuture] = useState({\n    nodes: [],\n    connections: []\n  });\n  const [navOpen, setNavOpen] = useState(false);\n  const [clickPosition, setClickPosition] = useState(null);\n  const [selectionRect, setSelectionRect] = useState(null);\n  const [dragging, setDragging] = useState(false);\n  const [canvasRect, setCanvasRect] = useState(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const savedNodes = localStorage.getItem(\"nodes\");\n    const savedConnections = localStorage.getItem(\"connections\");\n    if (savedNodes) {\n      setNodes(JSON.parse(savedNodes));\n      if (savedConnections) setConnections(JSON.parse(savedConnections));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"nodes\", JSON.stringify(nodes));\n    localStorage.setItem(\"connections\", JSON.stringify(connections));\n  }, [nodes, connections]);\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      if (canvasRef.current) {\n        setCanvasRect(canvasRef.current.getBoundingClientRect());\n      }\n    });\n    const currentCanvas = canvasRef.current;\n    if (currentCanvas) {\n      resizeObserver.observe(currentCanvas);\n    }\n    return () => {\n      if (currentCanvas) {\n        resizeObserver.unobserve(currentCanvas);\n      }\n    };\n  }, [canvasRef]);\n  useEffect(() => {\n    setWorkflow(convertToJSONFormat(nodes, connections));\n  }, [nodes, connections, setWorkflow]);\n  const saveWorkflow = () => {\n    const workflow = convertToJSONFormat(nodes, connections); //stringified\n    saveToFile(workflow);\n  };\n  const addNode = (type, position) => {\n    const id = uuidv4().replaceAll(\"-\", \"\");\n    const layer = 0;\n    const size = 100;\n    const newNode = {\n      id,\n      name: \"\",\n      type,\n      position,\n      size,\n      layer,\n      isEditing: true\n    };\n    if (connectingNode) {\n      if (isConnectionLegitimate(connectingNode, newNode)) {\n        addConnection(connectingNode, newNode);\n      } else {\n        return;\n      }\n    } else {\n      updateHistory();\n    }\n    setNodes(prevNodes => [...prevNodes, newNode]);\n  };\n  const handleNodeClick = node => {\n    setSelectionRect(null);\n    if (connectingNode) {\n      addConnection(connectingNode, node);\n      setConnectingNode(null);\n    } else if (nodeSelectionStatus(node.id) > 0) {\n      setSelectedNodes([]);\n    } else if (!navOpen) {\n      setSelectedNodes([node]);\n      setSelectedConnectionID(null);\n    } else {\n      setNavOpen(false);\n    }\n  };\n  const initNodeMove = nodeID => {\n    updateHistory();\n    switch (nodeSelectionStatus(nodeID)) {\n      case 0:\n        setSelectedNodes([]);\n        setSelectedNodeIDs(null);\n        break;\n      case 1:\n        setSelectedNodeIDs(null);\n        break;\n      case 2:\n        setSelectedNodeIDs(new Set(selectedNodes.map(n => n.id)));\n        break;\n      default:\n        return;\n    }\n  };\n  const handleNodeMove = _.throttle((nodeID, displacement) => {\n    if (selectedNodes.length > 1) {\n      if (!selectedNodeIDs) return;\n      setNodes(prevNodes => prevNodes.map(n => selectedNodeIDs.has(n.id) ? {\n        ...n,\n        position: {\n          x: n.position.x + displacement.x,\n          y: n.position.y + displacement.y\n        }\n      } : n));\n    } else {\n      setNodes(prevNodes => prevNodes.map(n => n.id === nodeID ? {\n        ...n,\n        position: {\n          x: n.position.x + displacement.x,\n          y: n.position.y + displacement.y\n        }\n      } : n));\n    }\n  }, 0);\n  const handleNodeConnect = node => {\n    setNavOpen(false);\n    setClickPosition(null);\n    setSelectedNodes([]);\n    setSelectedConnectionID(null);\n    setConnectingNode(node);\n  };\n  const initNodeNameChange = nodeID => {\n    updateHistory();\n    setNodes(prevNodes => prevNodes.map(node => node.id === nodeID ? {\n      ...node,\n      isEditing: true\n    } : node));\n  };\n  const handleNodeNameChange = (nodeID, name) => {\n    updateHistory();\n    const newName = name ? name : \"\";\n    setNodes(prevNodes => prevNodes.map(n => n.id === nodeID ? {\n      ...n,\n      name: newName,\n      isEditing: false\n    } : n));\n  };\n  const handleNodeLayerChange = (node, up) => {\n    updateHistory();\n    setNodes(prevNodes => prevNodes.map(n => {\n      if (n.id === node.id) {\n        return {\n          ...n,\n          layer: up ? n.layer + 1 : n.layer - 1 > 0 ? n.layer - 1 : 0\n        };\n      } else {\n        return n;\n      }\n    }));\n  };\n  const handleNodeScale = (nodeID, delta) => {\n    if (!delta) return;\n    updateHistory();\n    setNodes(prevNodes => prevNodes.map(n => {\n      if (n.id === nodeID) {\n        return {\n          ...n,\n          size: delta < 0 && n.size < 200 ? n.size - delta * 5 : delta > 0 && n.size > 75 ? n.size - delta * 5 : n.size\n        };\n      } else {\n        return n;\n      }\n    }));\n  };\n  const handleNodeDelete = nodeID => {\n    updateHistory();\n    setNodes(prevNodes => prevNodes.filter(n => n.id !== nodeID));\n    setConnections(prevConnections => prevConnections.filter(connection => connection.start.id !== nodeID && connection.end.id !== nodeID));\n    setSelectedNodes([]);\n  };\n  const handleNodeAction = (node, action, delta, name) => {\n    switch (action) {\n      case \"click\":\n        handleNodeClick(node);\n        break;\n      case \"initMove\":\n        initNodeMove(node.id);\n        break;\n      case \"scale\":\n        handleNodeScale(node.id, delta);\n        break;\n      case \"connect\":\n        handleNodeConnect(node);\n        break;\n      case \"rename\":\n        handleNodeNameChange(node.id, name);\n        break;\n      case \"setIsEditing\":\n        initNodeNameChange(node.id);\n        break;\n      case \"delete\":\n        setSelectedNodes([]);\n        handleNodeDelete(node.id);\n        break;\n      case \"layerUp\":\n        handleNodeLayerChange(node, true);\n        break;\n      case \"layerDown\":\n        handleNodeLayerChange(node, false);\n        break;\n      default:\n        break;\n    }\n  };\n  const nodeSelectionStatus = nodeID => {\n    const isSelected = selectedNodes.some(selectedNode => selectedNode.id === nodeID);\n    if (isSelected) {\n      if (selectedNodes.length > 1) return 2;\n      return 1;\n    }\n    return 0;\n  };\n  const addConnection = (start, end) => {\n    if (start.id === end.id) return;\n    const connectionExists = connections.some(connection => connection.start.id === start.id && connection.end.id === end.id || connection.start.id === end.id && connection.end.id === start.id);\n    if (connectionExists || !isConnectionLegitimate(start, end)) return; //add toast or something later\n    updateHistory();\n    const connectionID = uuidv4().replaceAll(\"-\", \"\");\n    setConnections(prevConnections => [...prevConnections, {\n      start: start,\n      end: end,\n      id: connectionID\n    }]);\n  };\n  const handleConnectionClick = connectionID => {\n    setSelectedConnectionID(connectionID);\n    setSelectedNodes([]);\n    if (navOpen) {\n      setNavOpen(false);\n      setClickPosition(null);\n    }\n  };\n  const handleConnectionDelete = connectionID => {\n    updateHistory();\n    setConnections(prevConnections => prevConnections.filter(connection => connection.id !== connectionID));\n  };\n  const handleConnectionReverse = connectionID => {\n    updateHistory();\n    setConnections(prevConnections => prevConnections.map(c => {\n      if (c.id === connectionID && isConnectionLegitimate(c.end, c.start)) {\n        return {\n          ...c,\n          start: c.end,\n          end: c.start\n        };\n      } else {\n        //throw error (connection not allowed)\n        return c;\n      }\n    }));\n  };\n  const handleConnectionAction = (connectionID, action) => {\n    switch (action) {\n      case \"click\":\n        handleConnectionClick(connectionID);\n        break;\n      case \"reverse\":\n        handleConnectionReverse(connectionID);\n        break;\n      case \"delete\":\n        handleConnectionDelete(connectionID);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleCanvasMouseDown = e => {\n    if (!canvasRect || navOpen) return;\n    setDragging(true);\n    setClickPosition({\n      x: e.clientX - canvasRect.left,\n      y: e.clientY - canvasRect.top\n    });\n  };\n  const handleCanvasMouseMove = e => {\n    if (!dragging || !clickPosition || !canvasRect) return;\n    const mousePos = {\n      x: e.clientX - canvasRect.left,\n      y: e.clientY - canvasRect.top\n    };\n    setSelectionRect({\n      left: Math.min(clickPosition.x, mousePos.x),\n      top: Math.min(clickPosition.y, mousePos.y),\n      width: Math.abs(mousePos.x - clickPosition.x),\n      height: Math.abs(mousePos.y - clickPosition.y)\n    });\n  };\n  const handleCanvasMouseUp = e => {\n    setDragging(false);\n    if (selectionRect) {\n      const newSelectedNodes = nodes.filter(node => {\n        return node.position.x >= selectionRect.left && node.position.x <= selectionRect.left + selectionRect.width && node.position.y >= selectionRect.top && node.position.y <= selectionRect.top + selectionRect.height;\n      });\n      setSelectedNodes(newSelectedNodes);\n      setClickPosition(null);\n    }\n  };\n  const handleCanvasClick = e => {\n    if (navOpen) {\n      setNavOpen(false);\n      setConnectingNode(null);\n    } else if (connectingNode) {\n      if (canvasRect) {\n        const canvasClickPosition = {\n          x: e.clientX - canvasRect.left,\n          y: e.clientY - canvasRect.top\n        };\n        setClickPosition(canvasClickPosition);\n        setNavOpen(true);\n      }\n    } else if (selectionRect) {\n      setSelectionRect(null);\n    } else {\n      setSelectedNodes([]);\n    }\n    setSelectedConnectionID(null);\n  };\n  const handleContextMenu = e => {\n    e.preventDefault();\n    setSelectionRect(null);\n    if (canvasRect) {\n      const canvasClickPosition = {\n        x: e.clientX - canvasRect.left,\n        y: e.clientY - canvasRect.top\n      };\n      setClickPosition(canvasClickPosition);\n      setNavOpen(true);\n    }\n    setSelectedNodes([]);\n    setSelectedConnectionID(null);\n    setConnectingNode(null);\n  };\n  const handleCanvasKeyUp = e => {\n    if (e.key === \"Delete\" && selectedNodes) {\n      const nodeIDs = new Set(selectedNodes.map(n => n.id));\n      if (!nodeIDs) return;\n      setNodes(prevNodes => prevNodes.filter(n => !nodeIDs.has(n.id)));\n      setConnections(prevConnections => prevConnections.filter(connection => !nodeIDs.has(connection.start.id) && !nodeIDs.has(connection.end.id)));\n    }\n  };\n  const handleContextSelect = type => {\n    if (type && clickPosition) {\n      addNode(type, clickPosition);\n    }\n    setNavOpen(false);\n    setClickPosition(null);\n  };\n  const handleLayoutNodes = e => {\n    updateHistory();\n    e.stopPropagation();\n    cytoscape.use(fcose);\n    const cy = cytoscape({\n      elements: {\n        nodes: nodes.map(node => ({\n          data: {\n            id: node.id\n          }\n        })),\n        edges: connections.map(connection => ({\n          data: {\n            id: connection.id,\n            source: connection.start.id,\n            target: connection.end.id\n          }\n        })) // Transform connections to Cytoscape format\n      },\n\n      headless: true\n    });\n    const layout = cy.layout(graphLayouts[3]); // choose layout\n    layout.run();\n    const nodePositions = cy.nodes().map(node => ({\n      id: node.id(),\n      position: node.position()\n    }));\n    if (canvasRect) {\n      const updatedNodes = nodes.map(node => {\n        const newNode = {\n          ...node\n        }; // Copy node to not mutate the original object\n        const foundPosition = nodePositions.find(np => np.id === node.id);\n        if (foundPosition) {\n          // const xPrime =\n          //   foundPosition.position.x * Math.cos(-Math.PI / 2) -\n          //   foundPosition.position.y * Math.sin(-Math.PI / 2)\n          // const yPrime =\n          //   foundPosition.position.x * Math.sin(-Math.PI / 2) +\n          //   foundPosition.position.y * Math.cos(-Math.PI / 2)\n\n          newNode.position = {\n            x: foundPosition.position.x + canvasRect.width / 2 - canvasRect.left,\n            y: foundPosition.position.y + canvasRect.height / 2 - canvasRect.top + 20\n          };\n        }\n        return newNode;\n      });\n      setNodes(updatedNodes);\n    }\n  };\n  const updateHistory = () => {\n    setHistory(prev => ({\n      nodes: [...prev.nodes, nodes].slice(-20),\n      connections: [...prev.connections, connections].slice(-20)\n    }));\n    setFuture({\n      nodes: [],\n      connections: []\n    });\n  };\n  const logHistory = () => {\n    history.nodes.forEach((nodesArray, index) => {\n      console.log(`History entry ${index}:`);\n      nodesArray.forEach((node, index) => {\n        console.log(`Node ${index}: x = ${node.position.x}, y = ${node.position.y}`);\n      });\n    });\n  };\n  const handleReset = () => {\n    if (!nodes.length) return;\n    updateHistory();\n    setNodes([]);\n    setConnections([]);\n  };\n  const undo = useCallback(() => {\n    if (history.nodes.length) {\n      setFuture(prev => ({\n        nodes: [nodes, ...prev.nodes].slice(-20),\n        connections: [connections, ...prev.connections].slice(-20)\n      }));\n      setNodes(history.nodes[history.nodes.length - 1]);\n      setConnections(history.connections[history.connections.length - 1]);\n      setHistory(prev => ({\n        nodes: prev.nodes.slice(0, -1),\n        connections: prev.connections.slice(0, -1)\n      }));\n    }\n  }, [history, nodes, connections]);\n  const redo = useCallback(() => {\n    if (future.nodes.length) {\n      setHistory(prev => ({\n        nodes: [...prev.nodes, nodes].slice(-20),\n        connections: [...prev.connections, connections].slice(-20)\n      }));\n      setNodes(future.nodes[0]);\n      setConnections(future.connections[0]);\n      setFuture(prev => ({\n        nodes: prev.nodes.slice(1),\n        connections: prev.connections.slice(1)\n      }));\n    }\n  }, [future, nodes, connections]);\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.ctrlKey && e.shiftKey && e.key === \"Z\") {\n        e.preventDefault();\n        redo();\n      } else if (e.ctrlKey) {\n        switch (e.key) {\n          case \"z\":\n            e.preventDefault();\n            undo();\n            break;\n          case \"y\":\n            e.preventDefault();\n            redo();\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [undo, redo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas\",\n    style: style\n    // Selection rectangle\n    ,\n    onMouseDown: handleCanvasMouseDown,\n    onMouseMove: handleCanvasMouseMove,\n    onMouseUp: handleCanvasMouseUp\n    // Context menu\n    ,\n    onClick: handleCanvasClick,\n    onContextMenu: handleContextMenu\n    // Delete stuff\n    ,\n    onKeyUp: handleCanvasKeyUp,\n    ref: canvasRef,\n    tabIndex: 0,\n    children: [connections.map((connection, i) => {\n      const startNode = nodes.find(node => node.id === connection.start.id);\n      const endNode = nodes.find(node => node.id === connection.end.id);\n      if (!startNode || !endNode) return null; // Skip rendering if nodes are not found\n      return /*#__PURE__*/_jsxDEV(Connection, {\n        handleConnectionAction: handleConnectionAction,\n        connection: {\n          start: startNode,\n          end: endNode,\n          id: connection.id\n        },\n        isSelected: connection.id === selectedConnectionID\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 11\n      }, this);\n    }), connectingNode && /*#__PURE__*/_jsxDEV(TempConnection, {\n      startPosition: connectingNode.position,\n      endPosition: clickPosition,\n      canvasRect: canvasRect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 9\n    }, this), nodes.map((node, i) => /*#__PURE__*/_jsxDEV(Node, {\n      node: node,\n      isSelected: nodeSelectionStatus(node.id),\n      connecting: Boolean(connectingNode),\n      colorIndex: colorIndex,\n      canvasRect: canvasRect,\n      handleNodeMove: handleNodeMove,\n      handleNodeAction: handleNodeAction\n    }, node.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 9\n    }, this)), selectionRect && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection-rect\",\n      style: {\n        top: selectionRect.top,\n        left: selectionRect.left,\n        width: selectionRect.width,\n        height: selectionRect.height\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-btn-wrap\",\n      style: {\n        left: canvasRect ? canvasRect.width / 2 : \"50%\"\n      },\n      children: [history.nodes.length, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn-divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn\",\n        onClick: undo,\n        children: /*#__PURE__*/_jsxDEV(UndoIcon, {\n          className: \"canvas-btn-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn-divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn\",\n        onClick: handleReset,\n        children: /*#__PURE__*/_jsxDEV(RestartAltIcon, {\n          className: \"canvas-btn-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn-divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn\",\n        onClick: redo,\n        children: /*#__PURE__*/_jsxDEV(RedoIcon, {\n          className: \"canvas-btn-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn-divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn\",\n        onClick: handleLayoutNodes,\n        children: /*#__PURE__*/_jsxDEV(TbBinaryTree, {\n          className: \"canvas-btn-icon\",\n          style: {\n            width: \"80%\",\n            height: \"80%\",\n            marginLeft: \"3px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn-divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-btn\",\n        onClick: saveWorkflow,\n        children: /*#__PURE__*/_jsxDEV(LuFileJson, {\n          className: \"canvas-btn-icon\",\n          style: {\n            width: \"80%\",\n            height: \"80%\",\n            marginLeft: \"3px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 7\n    }, this), navOpen && clickPosition && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: clickPosition.x,\n        top: clickPosition.y,\n        transform: \"translate(-50%, -50%)\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ContextCanvas, {\n        onSelect: handleContextSelect,\n        open: navOpen,\n        colorIndex: colorIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 628,\n    columnNumber: 5\n  }, this);\n}\n_s(Canvas, \"xMbceW7abe2+JjYmTZxFABaDMvU=\");\n_c = Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","v4","uuidv4","cytoscape","fcose","_","TbBinaryTree","RestartAltIcon","UndoIcon","RedoIcon","LuFileJson","ContextCanvas","Node","Connection","TempConnection","graphLayouts","isConnectionLegitimate","convertToJSONFormat","saveToFile","jsxDEV","_jsxDEV","Canvas","props","_s","colorIndex","setWorkflow","style","nodes","setNodes","selectedNodes","setSelectedNodes","selectedNodeIDs","setSelectedNodeIDs","connectingNode","setConnectingNode","connections","setConnections","selectedConnectionID","setSelectedConnectionID","history","setHistory","future","setFuture","navOpen","setNavOpen","clickPosition","setClickPosition","selectionRect","setSelectionRect","dragging","setDragging","canvasRect","setCanvasRect","canvasRef","savedNodes","localStorage","getItem","savedConnections","JSON","parse","setItem","stringify","resizeObserver","ResizeObserver","current","getBoundingClientRect","currentCanvas","observe","unobserve","saveWorkflow","workflow","addNode","type","position","id","replaceAll","layer","size","newNode","name","isEditing","addConnection","updateHistory","prevNodes","handleNodeClick","node","nodeSelectionStatus","initNodeMove","nodeID","Set","map","n","handleNodeMove","throttle","displacement","length","has","x","y","handleNodeConnect","initNodeNameChange","handleNodeNameChange","newName","handleNodeLayerChange","up","handleNodeScale","delta","handleNodeDelete","filter","prevConnections","connection","start","end","handleNodeAction","action","isSelected","some","selectedNode","connectionExists","connectionID","handleConnectionClick","handleConnectionDelete","handleConnectionReverse","c","handleConnectionAction","handleCanvasMouseDown","e","clientX","left","clientY","top","handleCanvasMouseMove","mousePos","Math","min","width","abs","height","handleCanvasMouseUp","newSelectedNodes","handleCanvasClick","canvasClickPosition","handleContextMenu","preventDefault","handleCanvasKeyUp","key","nodeIDs","handleContextSelect","handleLayoutNodes","stopPropagation","use","cy","elements","data","edges","source","target","headless","layout","run","nodePositions","updatedNodes","foundPosition","find","np","prev","slice","logHistory","forEach","nodesArray","index","console","log","handleReset","undo","redo","handleKeyDown","ctrlKey","shiftKey","window","addEventListener","removeEventListener","className","onMouseDown","onMouseMove","onMouseUp","onClick","onContextMenu","onKeyUp","ref","tabIndex","children","i","startNode","endNode","fileName","_jsxFileName","lineNumber","columnNumber","startPosition","endPosition","connecting","Boolean","marginLeft","transform","onSelect","open","_c","$RefreshReg$"],"sources":["/home/mdreger/Documents/MatGraphAI/MatGraphAI/frontend/src/components/canvas/canvas.component.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport cytoscape from \"cytoscape\"\nimport fcose from \"cytoscape-fcose\"\nimport _ from \"lodash\"\n\nimport { TbBinaryTree } from \"react-icons/tb\"\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\"\nimport UndoIcon from \"@mui/icons-material/Undo\"\nimport RedoIcon from \"@mui/icons-material/Redo\"\nimport { LuFileJson } from \"react-icons/lu\"\n\nimport ContextCanvas from \"./ctxt/canvas-ctxt.component\"\nimport Node from \"./node.component\"\nimport Connection, { TempConnection } from \"./connection.component\"\nimport {\n  Rect,\n  INode,\n  IConnection,\n  Position,\n  Vector2D,\n} from \"./types/canvas.types\"\nimport { graphLayouts } from \"./types/graphLayouts\"\nimport { isConnectionLegitimate, convertToJSONFormat, saveToFile } from \"./helper/canvas.helpers\"\n\ninterface CanvasProps {\n  colorIndex: number\n  setWorkflow: React.Dispatch<React.SetStateAction<string | null>>\n  style?: React.CSSProperties\n}\n\nexport default function Canvas(props: CanvasProps) {\n  const { colorIndex, setWorkflow, style } = props\n  const [nodes, setNodes] = useState<INode[]>([])\n  const [selectedNodes, setSelectedNodes] = useState<INode[]>([])\n  const [selectedNodeIDs, setSelectedNodeIDs] = useState<Set<string> | null>(\n    null\n  )\n  const [connectingNode, setConnectingNode] = useState<INode | null>(null)\n  const [connections, setConnections] = useState<IConnection[]>([])\n  const [selectedConnectionID, setSelectedConnectionID] = useState<\n    IConnection[\"id\"] | null\n  >(null)\n  const [history, setHistory] = useState<{\n    nodes: INode[][]\n    connections: IConnection[][]\n  }>({ nodes: [], connections: [] })\n  const [future, setFuture] = useState<{\n    nodes: INode[][]\n    connections: IConnection[][]\n  }>({ nodes: [], connections: [] })\n  const [navOpen, setNavOpen] = useState(false)\n  const [clickPosition, setClickPosition] = useState<Position | null>(null)\n  const [selectionRect, setSelectionRect] = useState<Rect | null>(null)\n  const [dragging, setDragging] = useState(false)\n  const [canvasRect, setCanvasRect] = useState<DOMRect | null>(null)\n  const canvasRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const savedNodes = localStorage.getItem(\"nodes\")\n    const savedConnections = localStorage.getItem(\"connections\")\n\n    if (savedNodes) {\n      setNodes(JSON.parse(savedNodes))\n      if (savedConnections) setConnections(JSON.parse(savedConnections))\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"nodes\", JSON.stringify(nodes))\n    localStorage.setItem(\"connections\", JSON.stringify(connections))\n  }, [nodes, connections])\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      if (canvasRef.current) {\n        setCanvasRect(canvasRef.current.getBoundingClientRect())\n      }\n    })\n\n    const currentCanvas = canvasRef.current\n    if (currentCanvas) {\n      resizeObserver.observe(currentCanvas)\n    }\n\n    return () => {\n      if (currentCanvas) {\n        resizeObserver.unobserve(currentCanvas)\n      }\n    }\n  }, [canvasRef])\n\n  useEffect(() => {\n    setWorkflow(convertToJSONFormat(nodes, connections))\n  }, [nodes, connections, setWorkflow])\n\n  const saveWorkflow = () => {\n    const workflow = convertToJSONFormat(nodes, connections) //stringified\n    saveToFile(workflow)\n  }\n\n  const addNode = (type: INode[\"type\"], position: Position) => {\n    const id = uuidv4().replaceAll(\"-\", \"\")\n    const layer = 0\n    const size = 100\n    const newNode = {\n      id,\n      name: \"\",\n      type,\n      position,\n      size,\n      layer,\n      isEditing: true,\n    }\n    if (connectingNode) {\n      if (isConnectionLegitimate(connectingNode, newNode)) {\n        addConnection(connectingNode, newNode)\n      } else {\n        return\n      }\n    } else {\n      updateHistory()\n    }\n    setNodes((prevNodes) => [...prevNodes, newNode])\n  }\n\n  const handleNodeClick = (node: INode) => {\n    setSelectionRect(null)\n    if (connectingNode) {\n      addConnection(connectingNode, node)\n      setConnectingNode(null)\n    } else if (nodeSelectionStatus(node.id) > 0) {\n      setSelectedNodes([])\n    } else if (!navOpen) {\n      setSelectedNodes([node])\n      setSelectedConnectionID(null)\n    } else {\n      setNavOpen(false)\n    }\n  }\n\n  const initNodeMove = (nodeID: INode[\"id\"]) => {\n    updateHistory()\n    switch (nodeSelectionStatus(nodeID)) {\n      case 0:\n        setSelectedNodes([])\n        setSelectedNodeIDs(null)\n        break\n      case 1:\n        setSelectedNodeIDs(null)\n        break\n      case 2:\n        setSelectedNodeIDs(new Set(selectedNodes.map((n) => n.id)))\n        break\n      default:\n        return\n    }\n  }\n\n  const handleNodeMove = _.throttle(\n    (nodeID: INode[\"id\"], displacement: Vector2D) => {\n      if (selectedNodes.length > 1) {\n        if (!selectedNodeIDs) return\n        setNodes((prevNodes) =>\n          prevNodes.map((n) =>\n            selectedNodeIDs.has(n.id)\n              ? {\n                  ...n,\n                  position: {\n                    x: n.position.x + displacement.x,\n                    y: n.position.y + displacement.y,\n                  },\n                }\n              : n\n          )\n        )\n      } else {\n        setNodes((prevNodes) =>\n          prevNodes.map((n) =>\n            n.id === nodeID\n              ? {\n                  ...n,\n                  position: {\n                    x: n.position.x + displacement.x,\n                    y: n.position.y + displacement.y,\n                  },\n                }\n              : n\n          )\n        )\n      }\n    },\n    0\n  )\n\n  const handleNodeConnect = (node: INode) => {\n    setNavOpen(false)\n    setClickPosition(null)\n    setSelectedNodes([])\n    setSelectedConnectionID(null)\n    setConnectingNode(node)\n  }\n\n  const initNodeNameChange = (nodeID: INode[\"id\"]) => {\n    updateHistory()\n    setNodes((prevNodes) =>\n      prevNodes.map((node) =>\n        node.id === nodeID ? { ...node, isEditing: true } : node\n      )\n    )\n  }\n\n  const handleNodeNameChange = (nodeID: INode[\"id\"], name?: string) => {\n    updateHistory()\n    const newName = name ? name : \"\"\n    setNodes((prevNodes) =>\n      prevNodes.map((n) =>\n        n.id === nodeID ? { ...n, name: newName, isEditing: false } : n\n      )\n    )\n  }\n\n  const handleNodeLayerChange = (node: INode, up: boolean) => {\n    updateHistory()\n    setNodes((prevNodes) =>\n      prevNodes.map((n) => {\n        if (n.id === node.id) {\n          return {\n            ...n,\n            layer: up ? n.layer + 1 : n.layer - 1 > 0 ? n.layer - 1 : 0,\n          }\n        } else {\n          return n\n        }\n      })\n    )\n  }\n\n  const handleNodeScale = (nodeID: INode[\"id\"], delta?: number) => {\n    if (!delta) return\n    updateHistory()\n    setNodes((prevNodes) =>\n      prevNodes.map((n) => {\n        if (n.id === nodeID) {\n          return {\n            ...n,\n            size:\n              delta < 0 && n.size < 200\n                ? n.size - delta * 5\n                : delta > 0 && n.size > 75\n                ? n.size - delta * 5\n                : n.size,\n          }\n        } else {\n          return n\n        }\n      })\n    )\n  }\n\n  const handleNodeDelete = (nodeID: INode[\"id\"]) => {\n    updateHistory()\n    setNodes((prevNodes) => prevNodes.filter((n) => n.id !== nodeID))\n    setConnections((prevConnections) =>\n      prevConnections.filter(\n        (connection) =>\n          connection.start.id !== nodeID && connection.end.id !== nodeID\n      )\n    )\n    setSelectedNodes([])\n  }\n\n  const handleNodeAction = (\n    node: INode,\n    action: string,\n    delta?: number,\n    name?: string\n  ) => {\n    switch (action) {\n      case \"click\":\n        handleNodeClick(node)\n        break\n      case \"initMove\":\n        initNodeMove(node.id)\n        break\n      case \"scale\":\n        handleNodeScale(node.id, delta)\n        break\n      case \"connect\":\n        handleNodeConnect(node)\n        break\n      case \"rename\":\n        handleNodeNameChange(node.id, name)\n        break\n      case \"setIsEditing\":\n        initNodeNameChange(node.id)\n        break\n      case \"delete\":\n        setSelectedNodes([])\n        handleNodeDelete(node.id)\n        break\n      case \"layerUp\":\n        handleNodeLayerChange(node, true)\n        break\n      case \"layerDown\":\n        handleNodeLayerChange(node, false)\n        break\n      default:\n        break\n    }\n  }\n\n  const nodeSelectionStatus = (nodeID: string) => {\n    const isSelected = selectedNodes.some(\n      (selectedNode) => selectedNode.id === nodeID\n    )\n    if (isSelected) {\n      if (selectedNodes.length > 1) return 2\n      return 1\n    }\n    return 0\n  }\n\n  const addConnection = (start: INode, end: INode) => {\n    if (start.id === end.id) return\n    const connectionExists = connections.some(\n      (connection) =>\n        (connection.start.id === start.id && connection.end.id === end.id) ||\n        (connection.start.id === end.id && connection.end.id === start.id)\n    )\n    if (connectionExists || !isConnectionLegitimate(start, end)) return //add toast or something later\n    updateHistory()\n    const connectionID = uuidv4().replaceAll(\"-\", \"\")\n    setConnections((prevConnections) => [\n      ...prevConnections,\n      { start: start, end: end, id: connectionID },\n    ])\n  }\n\n  const handleConnectionClick = (connectionID: IConnection[\"id\"]) => {\n    setSelectedConnectionID(connectionID)\n    setSelectedNodes([])\n    if (navOpen) {\n      setNavOpen(false)\n      setClickPosition(null)\n    }\n  }\n\n  const handleConnectionDelete = (connectionID: IConnection[\"id\"]) => {\n    updateHistory()\n    setConnections((prevConnections) =>\n      prevConnections.filter((connection) => connection.id !== connectionID)\n    )\n  }\n\n  const handleConnectionReverse = (connectionID: IConnection[\"id\"]) => {\n    updateHistory()\n    setConnections((prevConnections) =>\n      prevConnections.map((c) => {\n        if (c.id === connectionID && isConnectionLegitimate(c.end,c.start)) {\n          return { ...c, start: c.end, end: c.start }\n        } else {\n          //throw error (connection not allowed)\n          return c\n        }\n      })\n    )\n  }\n\n  const handleConnectionAction = (\n    connectionID: IConnection[\"id\"],\n    action: string\n  ) => {\n    switch (action) {\n      case \"click\":\n        handleConnectionClick(connectionID)\n        break\n      case \"reverse\":\n        handleConnectionReverse(connectionID)\n        break\n      case \"delete\":\n        handleConnectionDelete(connectionID)\n        break\n      default:\n        break\n    }\n  }\n\n  const handleCanvasMouseDown = (e: React.MouseEvent) => {\n    if (!canvasRect || navOpen) return\n    setDragging(true)\n    setClickPosition({\n      x: e.clientX - canvasRect.left,\n      y: e.clientY - canvasRect.top,\n    })\n  }\n\n  const handleCanvasMouseMove = (e: React.MouseEvent) => {\n    if (!dragging || !clickPosition || !canvasRect) return\n\n    const mousePos = {\n      x: e.clientX - canvasRect.left,\n      y: e.clientY - canvasRect.top,\n    }\n\n    setSelectionRect({\n      left: Math.min(clickPosition.x, mousePos.x),\n      top: Math.min(clickPosition.y, mousePos.y),\n      width: Math.abs(mousePos.x - clickPosition.x),\n      height: Math.abs(mousePos.y - clickPosition.y),\n    })\n  }\n\n  const handleCanvasMouseUp = (e: React.MouseEvent) => {\n    setDragging(false)\n    if (selectionRect) {\n      const newSelectedNodes = nodes.filter((node) => {\n        return (\n          node.position.x >= selectionRect.left &&\n          node.position.x <= selectionRect.left + selectionRect.width &&\n          node.position.y >= selectionRect.top &&\n          node.position.y <= selectionRect.top + selectionRect.height\n        )\n      })\n      setSelectedNodes(newSelectedNodes)\n      setClickPosition(null)\n    }\n  }\n\n  const handleCanvasClick = (e: React.MouseEvent) => {\n    if (navOpen) {\n      setNavOpen(false)\n      setConnectingNode(null)\n    } else if (connectingNode) {\n      if (canvasRect) {\n        const canvasClickPosition = {\n          x: e.clientX - canvasRect.left,\n          y: e.clientY - canvasRect.top,\n        }\n        setClickPosition(canvasClickPosition)\n        setNavOpen(true)\n      }\n    } else if (selectionRect) {\n      setSelectionRect(null)\n    } else {\n      setSelectedNodes([])\n    }\n    setSelectedConnectionID(null)\n  }\n\n  const handleContextMenu = (e: React.MouseEvent) => {\n    e.preventDefault()\n    setSelectionRect(null)\n    if (canvasRect) {\n      const canvasClickPosition = {\n        x: e.clientX - canvasRect.left,\n        y: e.clientY - canvasRect.top,\n      }\n      setClickPosition(canvasClickPosition)\n      setNavOpen(true)\n    }\n    setSelectedNodes([])\n    setSelectedConnectionID(null)\n    setConnectingNode(null)\n  }\n\n  const handleCanvasKeyUp = (e: React.KeyboardEvent) => {\n    if (e.key === \"Delete\" && selectedNodes) {\n      const nodeIDs = new Set(selectedNodes.map((n) => n.id))\n      if (!nodeIDs) return\n      setNodes((prevNodes) => \n        prevNodes.filter((n) => \n          !nodeIDs.has(n.id)\n        )\n      )\n      setConnections((prevConnections =>\n        prevConnections.filter((connection) =>\n          !nodeIDs.has(connection.start.id) &&\n          !nodeIDs.has(connection.end.id)\n        )\n      ))\n    }\n  }\n\n  const handleContextSelect = (type?: INode[\"type\"]) => {\n    if (type && clickPosition) {\n      addNode(type, clickPosition)\n    }\n    setNavOpen(false)\n    setClickPosition(null)\n  }\n\n  const handleLayoutNodes = (e: React.MouseEvent) => {\n    updateHistory()\n    e.stopPropagation()\n\n    cytoscape.use(fcose)\n    const cy = cytoscape({\n      elements: {\n        nodes: nodes.map((node) => ({ data: { id: node.id } })),\n        edges: connections.map((connection) => ({\n          data: {\n            id: connection.id,\n            source: connection.start.id,\n            target: connection.end.id,\n          },\n        })), // Transform connections to Cytoscape format\n      },\n      headless: true,\n    })\n\n    const layout = cy.layout(graphLayouts[3]) // choose layout\n    layout.run()\n\n    const nodePositions = cy.nodes().map((node) => ({\n      id: node.id(),\n      position: node.position(),\n    }))\n\n    if (canvasRect) {\n      const updatedNodes = nodes.map((node) => {\n        const newNode = { ...node } // Copy node to not mutate the original object\n        const foundPosition = nodePositions.find((np) => np.id === node.id)\n        if (foundPosition) {\n          // const xPrime =\n          //   foundPosition.position.x * Math.cos(-Math.PI / 2) -\n          //   foundPosition.position.y * Math.sin(-Math.PI / 2)\n          // const yPrime =\n          //   foundPosition.position.x * Math.sin(-Math.PI / 2) +\n          //   foundPosition.position.y * Math.cos(-Math.PI / 2)\n\n          newNode.position = {\n            x: foundPosition.position.x + canvasRect.width / 2 - canvasRect.left,\n            y: foundPosition.position.y + canvasRect.height / 2 - canvasRect.top + 20,\n          }\n        }\n        return newNode\n      })\n\n      setNodes(updatedNodes)\n    }\n  }\n\n  const updateHistory = () => {\n    setHistory((prev) => ({\n      nodes: [...prev.nodes, nodes].slice(-20),\n      connections: [...prev.connections, connections].slice(-20),\n    }))\n    setFuture({ nodes: [], connections: [] })\n  }\n\n  const logHistory = () => {\n    history.nodes.forEach((nodesArray, index) => {\n      console.log(`History entry ${index}:`);\n  \n      nodesArray.forEach((node, index) => {\n        console.log(`Node ${index}: x = ${node.position.x}, y = ${node.position.y}`);\n      });\n    });\n  };\n\n  const handleReset = () => {\n    if (!nodes.length) return\n    updateHistory()\n    setNodes([])\n    setConnections([])\n  }\n\n  const undo = useCallback(() => {\n    if (history.nodes.length) {\n      setFuture((prev) => ({\n        nodes: [nodes, ...prev.nodes].slice(-20),\n        connections: [connections, ...prev.connections].slice(-20),\n      }))\n      setNodes(history.nodes[history.nodes.length - 1])\n      setConnections(history.connections[history.connections.length - 1])\n      setHistory((prev) => ({\n        nodes: prev.nodes.slice(0, -1),\n        connections: prev.connections.slice(0, -1),\n      }))\n    }\n  }, [history, nodes, connections])\n\n  const redo = useCallback(() => {\n    if (future.nodes.length) {\n      setHistory((prev) => ({\n        nodes: [...prev.nodes, nodes].slice(-20),\n        connections: [...prev.connections, connections].slice(-20),\n      }))\n      setNodes(future.nodes[0])\n      setConnections(future.connections[0])\n      setFuture((prev) => ({\n        nodes: prev.nodes.slice(1),\n        connections: prev.connections.slice(1),\n      }))\n    }\n  }, [future, nodes, connections])\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.key === \"Z\") {\n        e.preventDefault()\n        redo()\n      } else if (e.ctrlKey) {\n        switch (e.key) {\n          case \"z\":\n            e.preventDefault()\n            undo()\n            break\n          case \"y\":\n            e.preventDefault()\n            redo()\n            break\n          default:\n            break\n        }\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown)\n    }\n  }, [undo, redo])\n\n  return (\n    <div\n      className=\"canvas\"\n      style={style}\n      // Selection rectangle\n      onMouseDown={handleCanvasMouseDown}\n      onMouseMove={handleCanvasMouseMove}\n      onMouseUp={handleCanvasMouseUp}\n      // Context menu\n      onClick={handleCanvasClick}\n      onContextMenu={handleContextMenu}\n      // Delete stuff\n      onKeyUp={handleCanvasKeyUp}\n      ref={canvasRef}\n      tabIndex={0}\n    >\n      {/* Connections */}\n      {connections.map((connection, i) => {\n        const startNode = nodes.find((node) => node.id === connection.start.id)\n        const endNode = nodes.find((node) => node.id === connection.end.id)\n        if (!startNode || !endNode) return null // Skip rendering if nodes are not found\n        return (\n          <Connection\n            key={i}\n            handleConnectionAction={handleConnectionAction}\n            connection={{ start: startNode, end: endNode, id: connection.id }}\n            isSelected={connection.id === selectedConnectionID}\n          />\n        )\n      })}\n      {/* Temp Connection */}\n      {connectingNode && (\n        <TempConnection\n          startPosition={connectingNode.position}\n          endPosition={clickPosition}\n          canvasRect={canvasRect}\n        />\n      )}\n      {/* Nodes */}\n      {nodes.map((node, i) => (\n        <Node\n          key={node.id}\n          node={node}\n          isSelected={nodeSelectionStatus(node.id)}\n          connecting={Boolean(connectingNode)}\n          colorIndex={colorIndex}\n          canvasRect={canvasRect}\n          handleNodeMove={handleNodeMove}\n          handleNodeAction={handleNodeAction}\n        />\n      ))}\n      {/* Selection rectangle */}\n      {selectionRect && (\n        <div\n          className=\"selection-rect\"\n          style={{\n            top: selectionRect.top,\n            left: selectionRect.left,\n            width: selectionRect.width,\n            height: selectionRect.height,\n          }}\n        />\n      )}\n      {/* Canvas Buttons */}\n      <div\n        className=\"canvas-btn-wrap\"\n        style={{ left: canvasRect ? canvasRect.width / 2 : \"50%\" }}\n      >\n        {history.nodes.length}\n        <div className=\"canvas-btn-divider\" />\n        <div className=\"canvas-btn\" onClick={undo}>\n          <UndoIcon className=\"canvas-btn-icon\" />\n        </div>\n        <div className=\"canvas-btn-divider\" />\n        <div className=\"canvas-btn\" onClick={handleReset}>\n          <RestartAltIcon className=\"canvas-btn-icon\" />\n        </div>\n        <div className=\"canvas-btn-divider\" />\n        <div className=\"canvas-btn\" onClick={redo}>\n          <RedoIcon className=\"canvas-btn-icon\" />\n        </div>\n        <div className=\"canvas-btn-divider\" />\n        <div className=\"canvas-btn\" onClick={handleLayoutNodes}>\n          <TbBinaryTree\n            className=\"canvas-btn-icon\"\n            style={{ width: \"80%\", height: \"80%\", marginLeft: \"3px\" }}\n          />\n        </div>\n        <div className=\"canvas-btn-divider\" />\n        <div className=\"canvas-btn\" onClick={saveWorkflow}>\n          <LuFileJson\n            className=\"canvas-btn-icon\"\n            style={{ width: \"80%\", height: \"80%\", marginLeft: \"3px\" }}\n          />\n        </div>\n\n        {/* Log History button for debugging */}\n        {/* <div className=\"canvas-btn-divider\" /> \n        <div className=\"canvas-btn\" onClick={logHistory}>\n          Log \n        </div>  */}\n      </div>\n      {/* Canvas Context Menu */}\n      {navOpen && clickPosition && (\n        <div\n          style={{\n            position: \"absolute\",\n            left: clickPosition.x,\n            top: clickPosition.y,\n            transform: \"translate(-50%, -50%)\",\n          }}\n        >\n          <ContextCanvas\n            onSelect={handleContextSelect}\n            open={navOpen}\n            colorIndex={colorIndex}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}